/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
PpdelayAudioProcessor::PpdelayAudioProcessor()
{
}

PpdelayAudioProcessor::~PpdelayAudioProcessor()
{
}

//==============================================================================
const String PpdelayAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool PpdelayAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PpdelayAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PpdelayAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PpdelayAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PpdelayAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PpdelayAudioProcessor::getCurrentProgram()
{
    return 0;
}

void PpdelayAudioProcessor::setCurrentProgram (int index)
{
}

const String PpdelayAudioProcessor::getProgramName (int index)
{
    return String();
}

void PpdelayAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void PpdelayAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void PpdelayAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void PpdelayAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    /*In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);

        // ..do something to the data...
    }
    */

    // Retrieve the total number of samples in the buffer for this block
    int numSamples = buffer.getNumSamples();

    // channelDataL and channelDataR are pointers to arrays of length numSamples which
    // contain the audio for one channel. You repeat this for each channel
    float *channelDataL = buffer.getWritePointer(0);
    float *channelDataR = buffer.getWritePointer(1);

    // Loop runs from 0 to number of samples in the block
    for (int i = 0; i < numSamples; ++i)
    {
    // Reduce the amplitude of each sample in the block for the
     // left and right channels
    channelDataL[i] = channelDataL[i] * 0.5;
    channelDataR[i] = channelDataR[i] * 0.25;
    }
}


//==============================================================================
bool PpdelayAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PpdelayAudioProcessor::createEditor()
{
    return new PpdelayAudioProcessorEditor (*this);
}

//==============================================================================
void PpdelayAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void PpdelayAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PpdelayAudioProcessor();
}
